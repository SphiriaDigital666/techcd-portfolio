generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @unique @default("")
  username      String   @unique
  firstName     String?
  lastName      String?
  email         String   @unique
  password      String
  phone         String?
  address       String?
  city          String?
  state         String?
  country       String?
  postalCode    String?
  profile_image String?  @default("http://store.thevingame.com/uploads/1729749708879.jpeg")
  refreshToken  String?
  isVerify      Boolean  @default(false)
  isDelete      Boolean  @default(false)
  reviews       Review[]
  cart          Cart?

  roleId    String     @db.ObjectId
  role      User_Roles @relation(fields: [roleId], references: [id])
  pin       String?
  pinExpiry DateTime?
  Order     Order[]
  Wishlist  Wishlist?

  @@map("user")
}

model User_Roles {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  users User[]

  @@map("user_roles")
}

model Category {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String         @unique
  level          Int // 1 = Parent, 2 = Subcategory, 3 = Super Subcategory
  description    String?
  image          String?
  parentId       String?        @db.ObjectId
  parent         Category?      @relation("CategoryToSubcategory", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children       Category[]     @relation("CategoryToSubcategory")
  gameCategories GameCategory[] // Relation to the join model

  @@index([parentId]) // Index for efficient querying by parent category
}

enum System {
  WINDOWS
  PLAYSTATION
  XBOX
}

enum StockStatus {
  IN_STOCK
  OUT_OF_STOCK
  ON_BACKORDER
}

model Game {
  id                  String         @id @default(auto()) @map("_id") @db.ObjectId
  productName         String
  displayName         String
  aboutThisGame       String?
  cardDescription     String?
  system              System
  languages           String[]
  releaseDate         DateTime?
  regularPrice        Float?
  sellingPrice        Float?
  stock               Int?
  SKU                 String?        @unique
  stockStatus         StockStatus
  minimumOS           String?
  minimumCPU          String?
  minimumRAM          String?
  minimumGPU          String?
  minimumStorage      String?
  recommendedOS       String?
  recommendedCPU      String?
  recommendedRAM      String?
  recommendedGPU      String?
  recommendedStorage  String?
  coverImage          String?
  screenshots         String[]
  video               String?
  cardImage           String?
  latestImage         String?
  addToLatestGames    Boolean        @default(false)
  addToCarousel       Boolean        @default(false)
  displayInLatesGames Boolean        @default(false)
  published           Boolean
  gameCategories      GameCategory[] // Relation to the join model
  reviews             Review[] // One-to-many relationship with reviews
  tags                GameTag[] // Many-to-many relationship with tags
  brandId             String         @db.ObjectId
  Brand               Brand          @relation(fields: [brandId], references: [id], onDelete: Cascade)
  platformId          String         @db.ObjectId
  Platform            Platform       @relation(fields: [platformId], references: [id], onDelete: Cascade)
  CartItem            CartItem[]

  OrderProduct OrderProduct[]
  WishlistItem WishlistItem[]

  totalSales    Int   @default(0)
  averageRating Float @default(0)
}

model GameCategory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  gameId     String   @db.ObjectId
  categoryId String   @db.ObjectId
  game       Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([gameId])
  @@index([categoryId])
}

enum PublishStatus {
  Rejected
  Approved
}

model Review {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int // Rating out of 5
  comment   String
  createdAt DateTime      @default(now())
  publish   PublishStatus @default(Rejected) // Enum for publishing status
  title     String?

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  gameId String @db.ObjectId
  game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([gameId])
}

model Tag {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  description String?
  image       String?
  gameTags    GameTag[]
}

model GameTag {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  gameId String @db.ObjectId
  tagId  String @db.ObjectId
  game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@index([gameId])
  @@index([tagId])
}

model Brand {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique
  description String?
  image       String?
  games       Game[]
}

model Platform {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique
  description String?
  image       String?
  games       Game[]
}

model Cart {
  id     String     @id @default(auto()) @map("_id") @db.ObjectId
  userId String     @unique @db.ObjectId
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items  CartItem[]
}

model CartItem {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  cartId   String @db.ObjectId
  gameId   String @db.ObjectId
  quantity Int
  cart     Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  game     Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@index([cartId])
  @@index([gameId])
}

model Wishlist {
  id     String         @id @default(auto()) @map("_id") @db.ObjectId
  userId String         @unique @db.ObjectId
  user   User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items  WishlistItem[]
}

model WishlistItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  wishlistId String   @db.ObjectId
  gameId     String   @db.ObjectId
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  game       Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@index([wishlistId])
  @@index([gameId])
}

model Order {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  userId         String?        @db.ObjectId
  user           User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime       @default(now())
  products       OrderProduct[]
  status         OrderStatus    @default(PENDING)
  totalAmount    Float
  appliedCoupons OrderCoupon[]
  discount       Int?           @default(0)

  systemuserId String?
  firstName    String
  lastName     String
  email        String
  phone        String
  country      String
  city         String
  address      String
  postalCode   String
  message      String?

  @@index([userId])
}

model OrderProduct {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  orderId  String @db.ObjectId
  order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  gameId   String @db.ObjectId
  game     Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
  quantity Int
  price    Float

  @@index([orderId])
  @@index([gameId])
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
  HOLD
}

model Coupon {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  code          String        @unique
  discount      Float
  type          CouponType
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  description   String?
  appliedOrders OrderCoupon[]
}

enum CouponType {
  PERCENTAGE
  FIXED
}

model OrderCoupon {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  orderId  String @db.ObjectId
  order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  couponId String @db.ObjectId
  coupon   Coupon @relation(fields: [couponId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([couponId])
}

model ManualOrder {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId       String
  name          String
  email         String
  date          DateTime
  product_name  String
  sku           String
  quantity      Int
  selling_price Float
  coupon_code   String?
  discount      Float
  total_amount  Float
}
